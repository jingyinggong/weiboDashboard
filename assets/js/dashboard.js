// Generated by CoffeeScript 1.3.3

$(function() {
  var account_data, dayT, generate_int, generate_percent, generate_trs, getCheckedIdNames, init_date_range, init_pagination, reorder, setClass, set_up_down, table, tbody, td_vars, th, tpl_pagination, tpl_tr, weekT, _i, _results;
  dayT = 1000 * 60 * 60 * 24;
  weekT = 1000 * 60 * 60 * 24 * 7;
  getCheckedIdNames = function(el) {
    var checks, items;
    checks = el.find('input:checked');
    items = [];
    checks.each(function(i, v) {
      var item;
      item = {
        name: $(v).data('name'),
        id: $(v).val()
      };
      return items.push(item);
    });
    return items;
  };
  $.ajax({
    url: '/sina/api-qushi.php',
    dataType: 'json',
    method: 'get',
    success: function(d) {
      $('#c1').draw_chart({
        parseData: function(d, el) {
          var STATIC, arr, items, max, min;
          STATIC = 'new_fans_count';
          items = getCheckedIdNames(el);
          arr = _.groupBy(d, function(obj) {
            return obj['id'];
          });
          arr = _.map(arr, function(v, k) {
            var obj;
            obj = {};
            obj['id'] = v[0]['id'];
            obj['data'] = _.map(v, function(item) {
              return {
                x: item['date'],
                y: item[STATIC]
              };
            });
            return obj;
          });
          arr = _.map(items, function(v, k) {
            var item;
            item = _.find(arr, function(obj) {
              return obj['id'] + "" === v['id'] + "";
            });
            item['name'] = v['name'];
            return item;
          });
          min = _.min(d, function(obj) {
            return obj[STATIC];
          });
          max = _.max(d, function(obj) {
            return obj[STATIC];
          });
          return {
            series: arr,
            yAxis: {
              min: min[STATIC],
              max: max[STATIC]
            }
          };
        },
        data: d
      });
      return $('#c2').draw_chart({
        parseData: function(d, el) {
          var arr, cat, items;
          items = getCheckedIdNames(el);
          cat = _.map(items, function(v) {
            return v['name'];
          });
          arr = _.groupBy(d, function(obj) {
            return obj['id'];
          });
          arr = _.map(arr, function(v, k) {
            var vs;
            vs = _.reduce(v, function(m, o) {
              return parseInt(100 * (m + o['new_fans_quality'])) / 100;
            }, 0);
            return {
              id: v[0]['id'],
              v: vs
            };
          });
          arr = _.map(items, function(v, k) {
            var item;
            item = _.find(arr, function(obj) {
              return obj['id'] + "" === v['id'] + "";
            });
            return item['v'];
          });
          return {
            chart: {
              type: 'column'
            },
            series: [
              {
                name: 'object1',
                data: arr
              }
            ],
            xAxis: {
              categories: cat
            }
          };
        },
        data: d,
        type: 'column'
      });
    },
    error: function(e) {
      return console.log(e);
    }
  });
  $.ajax({
    url: '/sina/api-v-content.php',
    dataType: 'json',
    method: 'get',
    success: function(d) {
      $('#c3').draw_chart({
        parseData: function(d, el) {
          var arr, cat, items, nameObj, o;
          nameObj = {
            cs: '评论数',
            rs: '转发数'
          };
          items = getCheckedIdNames(el);
          cat = _.map(items, function(v) {
            return v['name'];
          });
          arr = _.groupBy(d, function(obj) {
            return obj['id'];
          });
          arr = _.map(arr, function(v, k) {
            var cs, rs;
            cs = _.reduce(v, function(m, o) {
              return parseInt(100 * (m + o['comment_count'])) / 100;
            }, 0);
            rs = _.reduce(v, function(m, o) {
              return parseInt(100 * (m + o['repost_count'])) / 100;
            }, 0);
            return {
              id: v[0]['id'],
              cs: cs,
              rs: rs
            };
          });
          o = {};
          o.cs = _.map(items, function(v, k) {
            var item;
            item = _.find(arr, function(obj) {
              return obj['id'] + "" === v['id'] + "";
            });
            return item['cs'];
          });
          o.rs = _.map(items, function(v, k) {
            var item;
            item = _.find(arr, function(obj) {
              return obj['id'] + "" === v['id'] + "";
            });
            return item['rs'];
          });
          arr = _.map(nameObj, function(v, k) {
            return {
              name: v,
              data: o[k]
            };
          });
          console.log(arr);
          return {
            chart: {
              type: 'column'
            },
            series: arr,
            xAxis: {
              categories: cat
            }
          };
        },
        data: d,
        type: 'bar'
      });
      return $('#c4').draw_chart({
        parseData: function(d, el) {
          var arr, cat, items, select, sv, txt;
          items = getCheckedIdNames(el);
          cat = _.map(items, function(v) {
            return v['name'];
          });
          select = el.find('select')[0];
          sv = select.value;
          txt = select.options[select.selectedIndex].text;
          arr = _.groupBy(d, function(obj) {
            return obj['id'];
          });
          arr = _.map(arr, function(v, k) {
            var values;
            values = _.reduce(v, function(m, o) {
              return parseInt(100 * (m + o[sv])) / 100;
            }, 0);
            return {
              id: v[0]['id'],
              data: values
            };
          });
          arr = _.map(items, function(v, k) {
            var item;
            item = _.find(arr, function(obj) {
              return obj['id'] + "" === v['id'] + "";
            });
            if (k === 0) {
              return {
                name: v['name'],
                y: item['data'],
                sliced: true,
                selected: true
              };
            } else {
              return {
                name: v['name'],
                y: item['data']
              };
            }
          });
          return {
            chart: {
              type: 'pie'
            },
            series: [
              {
                type: 'pie',
                name: txt,
                data: arr
              }
            ],
            xAxis: {
              categories: cat
            }
          };
        },
        data: d,
        type: 'pie'
      });
    },
    error: function(e) {
      return console.log(e);
    }
  });
  $('[name="custom_column"]').on('change', function(e) {
    var checked, col, o, v;
    o = $(this);
    v = o.val();
    checked = o.is(':checked');
    col = o.closest('.widget-box').find('table [data-col=' + v + ']');
    if (checked) {
      return col.show();
    } else {
      return col.hide();
    }
  });
  generate_int = function() {
    return parseInt(Math.random() * 95) + 5;
  };
  generate_percent = function() {
    if (Math.random() > 0.5) {
      return '+11.3%';
    } else {
      return '-12.3%';
    }
  };
  account_data = _.map((function() {
    _results = [];
    for (_i = 1; _i <= 501; _i++){ _results.push(_i); }
    return _results;
  }).apply(this), function(i, k) {
    return {
      account_url: 'account_url' + i,
      account_icon: 'account_icon' + i,
      account_name: 'account_name' + i,
      funs: generate_int(),
      funs_compare: generate_percent(),
      funs_quality: generate_int(),
      funs_quality_compare: generate_percent(),
      posts: generate_int(),
      posts_compare: generate_percent(),
      forwards: generate_int(),
      forwards_compare: generate_percent(),
      imp: generate_int(),
      imp_compare: generate_percent()
    };
  });
  setClass = function(obj, itemName) {
    if (obj[itemName + "_compare"].match(/-/)) {
      return obj[itemName + "_cls"] = 'red';
    } else {
      return obj[itemName + "_cls"] = 'green';
    }
  };
  td_vars = ['forwards', 'funs', 'posts', 'imp'];
  tpl_tr = $('#tpl-account-tr').html();
  table = $('.widget-content table');
  tbody = table.find('tbody');
  _.each(account_data, function(v, k) {
    return _.each(td_vars, function(i) {
      return setClass(v, i);
    });
  });
  generate_trs = function(arr) {
    tbody.empty();
    return _.each(arr, function(v) {
      var str;
      str = _.template(tpl_tr, v);
      return tbody.append(str);
    });
  };
  reorder = function(arr, item, reversed) {
    var ordered;
    ordered = _.sortBy(arr, function(v) {
      return v[item];
    });
    if (reversed) {
      ordered = ordered.reverse();
    }
    return ordered;
  };
  th = $('.widget-content table .order');
  tpl_pagination = $('#tpl-pagination').html();
  init_pagination = function(arr, tpl, table) {
    var $t, cur, disableLinks, first, last, length, next, page_generate_table, pages, paginationold, prev, total;
    if (!_.isArray(arr)) {
      return;
    }
    pages = Math.ceil(arr.length / 20);
    length = arr.length;
    tpl = _.template(tpl, {
      pages: pages
    });
    paginationold = table.next(".pagination");
    if (paginationold.length) {
      paginationold.remove();
    }
    table.after(tpl);
    $t = table.next('.pagination');
    first = $t.find('.page-first');
    prev = $t.find('.page-prev');
    next = $t.find('.page-next');
    total = $t.find('.page-total');
    cur = $t.find('.input-mini');
    last = $t.find('.page-last');
    disableLinks = function() {
      var v;
      v = parseInt(cur.val());
      if (v === 1) {
        first.addClass('disabled');
        prev.addClass('disabled');
        next.removeClass('disabled');
        return last.removeClass('disabled');
      } else if (v === pages) {
        first.removeClass('disabled');
        prev.removeClass('disabled');
        next.addClass('disabled');
        return last.addClass('disabled');
      } else {
        first.removeClass('disabled');
        prev.removeClass('disabled');
        next.removeClass('disabled');
        return last.removeClass('disabled');
      }
    };
    page_generate_table = function() {
      var v;
      v = parseInt(cur.val());
      if (v === pages) {
        return generate_trs(arr.slice((v - 1) * 20, length));
      } else {
        return generate_trs(arr.slice((v - 1) * 20, v * 20));
      }
    };
    disableLinks();
    page_generate_table();
    cur.keydown(function(e) {
      var c;
      c = e.keyCode;
      if (c === 8 || c === 13 || (c >= 48 && c <= 57)) {
        if (c === 13) {
          return cur.blur();
        }
      } else {
        return false;
      }
    });
    cur.keyup(function(e) {
      var o, v;
      o = $(this);
      v = o.val();
      if (v < 1 || v > pages) {
        return o.val(1);
      }
    });
    cur.blur(function(e) {
      var v;
      v = $(this).val();
      return page_generate_table();
    });
    first.click(function(e) {
      var o;
      o = $(this);
      if (o.is('.disabled')) {
        return false;
      }
      cur.val(1);
      disableLinks();
      return page_generate_table();
    });
    prev.click(function(e) {
      var o, v;
      o = $(this);
      if (o.is('.disabled')) {
        return false;
      }
      v = parseInt(cur.val());
      cur.val(v - 1);
      disableLinks();
      return page_generate_table();
    });
    next.click(function(e) {
      var o, v;
      o = $(this);
      if (o.is('.disabled')) {
        return false;
      }
      v = parseInt(cur.val());
      cur.val(v + 1);
      disableLinks();
      return page_generate_table();
    });
    return last.click(function(e) {
      var o, v;
      o = $(this);
      if (o.is('.disabled')) {
        return false;
      }
      v = parseInt(cur.val());
      cur.val(pages);
      disableLinks();
      return page_generate_table();
    });
  };
  set_up_down = function(obj) {
    var i;
    obj.siblings('.order').find('i').removeClass();
    i = obj.find('i');
    if (i.is('.icon-arrow-down')) {
      i.removeClass("icon-arrow-down");
      return i.addClass("icon-arrow-up");
    } else if (i.is('.icon-arrow-up')) {
      i.removeClass("icon-arrow-up");
      return i.addClass("icon-arrow-down");
    } else {
      return i.addClass("icon-arrow-down");
    }
  };
  th.click(function() {
    var i, is_arrow_down, item, o, x;
    o = $(this);
    i = o.find('i');
    item = o.data('order');
    set_up_down(o);
    is_arrow_down = i.is('.icon-arrow-down');
    x = reorder(account_data, item, is_arrow_down);
    return init_pagination(x, tpl_pagination, table);
  });
  init_pagination(account_data, tpl_pagination, table);
  $('[rel=tooltip]').tooltip();
  init_date_range = function(n) {
    var $daterange, clone, endD, startD, v;
    if (n == null) {
      n = 1;
    }
    startD = Date.today().add({
      days: -1 * (n + 1)
    });
    endD = Date.today().add({
      days: -1
    });
    v = startD.toString('MM/d/yyyy') + ' - ' + endD.toString('MM/d/yyyy');
    $daterange = $('input#date-range');
    clone = $daterange.clone();
    $daterange.replaceWith(clone);
    $daterange = $('input#date-range');
    $daterange.val(v);
    return $daterange.daterangepicker({
      opens: 'left',
      startDate: startD,
      endDate: endD,
      maxDate: endD
    });
  };
  init_date_range();
  return $('.days-short .btn').click(function() {
    var o, v;
    o = $(this);
    v = o.data('day');
    return init_date_range(v);
  });
});
