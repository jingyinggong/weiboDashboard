// Generated by CoffeeScript 1.3.3

$(function() {
  var data_pie_parser, getCheckedIdNames, key_words_show, posts_show, rank_show, render_key_words, tplhot, tplposts;
  getCheckedIdNames = function(el) {
    var checks, items;
    checks = el.find('input:checked');
    items = [];
    checks.each(function(i, v) {
      var item;
      item = {
        id: $(v).val(),
        key: $(v).data('name')
      };
      return items.push(item);
    });
    return items;
  };
  data_pie_parser = function(d, el, name) {
    var arr, keys;
    keys = getCheckedIdNames(el);
    arr = _.map(keys, function(v, k) {
      var item;
      item = _.find(d, function(obj) {
        return obj['key'] === v['key'];
      });
      if (k === 0) {
        return {
          name: item['key'],
          y: item[name[0]],
          sliced: true,
          selected: true
        };
      } else {
        return {
          name: v['key'],
          y: item[name[0]]
        };
      }
    });
    return {
      chart: {
        type: 'pie'
      },
      series: [
        {
          type: 'pie',
          data: arr,
          name: name[1]
        }
      ]
    };
  };
  tplhot = $('#tpl-hotwords');
  rank_show = function(opt) {
    var el, tpl, url;
    tpl = opt['tpl'];
    el = opt['el'];
    url = opt['url'];
    return $.ajax({
      url: url,
      dataType: 'json',
      method: 'get',
      success: function(d) {
        var arr, arrnames, total;
        arrnames = ['key', 'num'];
        arr = _.map(d, function(v, k) {
          var obj;
          return obj = _.object(arrnames, v);
        });
        arr = _.sortBy(arr, function(v) {
          return v['num'];
        });
        arr = arr.reverse();
        total = _.max(arr, function(v) {
          return v['num'];
        });
        arr = _.map(arr, function(v, k) {
          v['order_num'] = k + 1;
          v['percent'] = v['num'] / total['num'] * 100;
          return v;
        });
        return el.renderTpl({
          data: arr,
          tpl: tpl
        });
      },
      error: function(e) {
        return console.log(e);
      }
    });
  };
  tplposts = $('#tpl-weibo-item');
  posts_show = function(opt) {
    var el, tpl, url;
    tpl = opt['tpl'];
    el = opt['el'];
    url = opt['url'];
    return $.ajax({
      url: url,
      dataType: 'json',
      method: 'get',
      success: function(d) {
        return el.renderTpl({
          data: d,
          tpl: tpl,
          callback: function() {
            return console.log($(this));
          }
        });
      },
      error: function(e) {
        return console.log(e);
      }
    });
  };
  render_key_words = function(opt) {
    var callback, data, el, url;
    url = opt['url'];
    data = opt['data'];
    callback = opt['callback'];
    el = opt['el'];
    return $.ajax({
      url: url,
      dataType: 'json',
      method: 'get',
      success: function(d) {
        return callback(data, d, el);
      }
    });
  };
  key_words_show = function(opt) {
    var url;
    url = opt['url'];
    return $.ajax({
      url: url,
      dataType: 'json',
      method: 'get',
      success: function(d) {
        $('#c1').draw_chart({
          parseData: function(d, el) {
            return data_pie_parser(d, el, ['statuses', '声量对比']);
          },
          data: d
        });
        $('#c2').draw_chart({
          parseData: function(d, el) {
            return data_pie_parser(d, el, ['flash', '曝光对比']);
          },
          data: d
        });
        $('#c3').draw_chart({
          parseData: function(d, el) {
            var arr, cat, cat1, keyNames;
            cat = getCheckedIdNames(el);
            cat1 = _.map(cat, function(v, k) {
              return v['key'];
            });
            arr = _.map(cat, function(v, k) {
              var item;
              item = _.find(d, function(obj) {
                return obj['key'] === v['key'];
              });
              return item;
            });
            keyNames = {
              'pos': '正面评论',
              'neu': '中性评论',
              'neg': '负面评论'
            };
            arr = _.map(keyNames, function(v, k) {
              var items;
              items = _.map(arr, function(obj) {
                return obj[k];
              });
              return {
                name: v,
                data: items
              };
            });
            return {
              chart: {
                type: 'column'
              },
              series: arr,
              xAxis: {
                categories: cat1
              }
            };
          },
          type: 'bar',
          data: d
        });
        return render_key_words({
          url: url,
          data: d,
          el: $('#table-keyword'),
          callback: function(old_posts, new_posts, container) {
            console.log(old_posts);
            console.log(new_posts);
            return console.log(container);
          }
        });
      },
      error: function(e) {
        return console.log(e);
      }
    });
  };
  key_words_show({
    url: '/sina/api-keywords1.php'
  });
  rank_show({
    url: '/sina/api-keywords-hot.php',
    el: $('#hot-rank'),
    tpl: tplhot.html()
  });
  posts_show({
    el: $('#hot-posts'),
    url: '/sina/api-posts-trends.php',
    tpl: tplposts.html()
  });
  return posts_show({
    el: $('#rc-posts'),
    url: '/sina/api-posts-trends.php',
    tpl: tplposts.html()
  });
});
